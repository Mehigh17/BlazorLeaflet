@page "/marker"

@using System.Drawing
@using BlazorLeaflet.Models
@using BlazorLeaflet.Models.Events
@inject IJSRuntime jsRuntime

<h1>Blazor Leaflet </h1>

<h3>Drag &amp; drop the Marker!</h3>

<div class="form-inline m-2">
    <div class="form-group mb-2">
        <label>Lat </label>
        <input class="form-control ml-2 mr-2" placeholder="city name" @bind="Lat" disabled />
    </div>

    <div class="form-group mb-2">
        <label>Lng </label>
        <input class="form-control ml-2 mr-2" placeholder="city name" @bind="Lng" disabled />
    </div>
</div>

<div class="content-row">
    <div style="height: 500px; width: 500px;">
        <LeafletMap Map="_map" InitialPosition="_startAt" InitialZoom="4.8f" />
    </div>

    <DemoLogger @ref="Logger" />
</div>

@code
{
    private DemoLogger Logger;

    private Map _map;

    protected override void OnInitialized()
    {
        _startAt = new PointF(Lat, Lng);

        _map = new Map(jsRuntime);

        _map.Layers.Add(new TileLayer
        {
            UrlTemplate = "https://a.tile.openstreetmap.org/{z}/{x}/{y}.png",
            Attribution = "&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors",
        });

        var marker = new Marker(_startAt)
        {
            Draggable = true,
            Title = "Marker 1"
        };

        Action<string> log = (string message) => Logger.Log($"{nameof(Marker)}.{message}");

        marker.OnAdd += (s, e) => log(nameof(marker.OnAdd));
        marker.OnClick += (s, e) => log(nameof(marker.OnClick));
        marker.OnContextMenu += (s, e) => log(nameof(marker.OnContextMenu));
        marker.OnDblClick += (s, e) => log(nameof(marker.OnDblClick));
        marker.OnDrag += (s, e) => log(nameof(marker.OnDrag));
        marker.OnDragEnd += (s, e) => log(nameof(marker.OnDragEnd));
        marker.OnDragStart += (s, e) => log(nameof(marker.OnDragStart));
        marker.OnMouseDown += (s, e) => log(nameof(marker.OnMouseDown));
        marker.OnMouseOut += (s, e) => log(nameof(marker.OnMouseOut));
        marker.OnMouseOver += (s, e) => log(nameof(marker.OnMouseOver));
        marker.OnMouseUp += (s, e) => log(nameof(marker.OnMouseUp));
        marker.OnMove += (s, e) => log(nameof(marker.OnMove));
        marker.OnMoveEnd += (s, e) => log(nameof(marker.OnMoveEnd));
        marker.OnMoveStart += (s, e) => log(nameof(marker.OnMoveStart));
        marker.OnRemove += (s, e) => log(nameof(marker.OnRemove));
        marker.OnPopupClose += (s, e) => log(nameof(marker.OnPopupClose));
        marker.OnPopupOpen += (s, e) => log(nameof(marker.OnPopupOpen));
        marker.OnTooltipClose += (s, e) => log(nameof(marker.OnTooltipClose));
        marker.OnTooltipOpen += (s, e) => log(nameof(marker.OnTooltipOpen));

        marker.OnMove += OnDrag;

        _map.Layers.Add(marker);
    }

    private void OnDrag(Marker marker, DragEvent evt)
    {
        Lat = (float)evt.LatLng.Lat;
        Lng = (float)evt.LatLng.Lng;
        StateHasChanged();
    }

    private float Lat { get; set; } = 47.5574007f;

    private float Lng { get; set; } = 16.3918687f;

    private PointF _startAt;

}