@using System.Drawing
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components
@inject IJSRuntime JsRuntime

<div id="@Map.Id" style="width: 100%; height: 100%;"></div>

@code {

    [Parameter] public Map Map { get; set; }
    [Parameter] public PointF InitialPosition { get; set; } = PointF.Empty;
    [Parameter] public float? InitialZoom { get; set; } = 13f;
    [Parameter] public float? MaxZoom { get; set; }
    [Parameter] public float? MinZoom { get; set; }
    [Parameter] public PredefinedCRS CRS { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var args = new MapArgs
            {
                Center = InitialPosition,
                Zoom = InitialZoom,
                MaxZoom = MaxZoom,
                MinZoom = MinZoom,
                CRS = CRS.ToString()
            };
            await LeafletInterops.Create(JsRuntime, Map.Id, args);

            Map.Layers.CollectionChanged += OnLayersChanged;
            foreach (var layer in Map.Layers.ToList())
            {
                await LeafletInterops.AddLayer(JsRuntime, Map.Id, layer);
            }
        }
    }

    private void OnLayersChanged(object sender, NotifyCollectionChangedEventArgs args)
    {
        if (args.Action == NotifyCollectionChangedAction.Add)
        {
            foreach (var item in args.NewItems)
                LeafletInterops.AddLayer(JsRuntime, Map.Id, item as Layer);
        }
        else if (args.Action == NotifyCollectionChangedAction.Remove)
        {
            foreach (var item in args.OldItems)
            {
                if (item is Layer layer)
                {
                    LeafletInterops.RemoveLayer(JsRuntime, Map.Id, layer.Id);
                }
            }
        }
        else if (args.Action == NotifyCollectionChangedAction.Replace
                 || args.Action == NotifyCollectionChangedAction.Move)
        {
            foreach (var oldItem in args.OldItems)
                if (oldItem is Layer layer)
                    LeafletInterops.RemoveLayer(JsRuntime, Map.Id, layer.Id);

            foreach (var newItem in args.NewItems)
                LeafletInterops.AddLayer(JsRuntime, Map.Id, newItem as Layer);
        }
    }

}
